########################################
################ SETUP ##################
########################################

[project]
name = "impl"
description = "impl"
version = "0.0.1"
authors = [{ name = "MaxOB" }]
readme = "README.md"

[tool.setuptools]
packages = ["impl"]


########################################
################ RUFF ##################
########################################
[tool.ruff]
# Enable automatic fixing of errors where possible.
fix = false

# Cache successful lint results to speed up subsequent runs
cache-dir = ".ruff_cache"

# Respect gitignore when searching for Python files
respect-gitignore = true

# Show files being processed when running with -v
show-fixes = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*.ipynb",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.8
target-version = "py310"

[tool.ruff.lint]
# Enable all rules initially
select = ["ALL"]

# Ignore specific rules
ignore = [
    "ISC001",  # Due to issues with ruff formatter
    "ANN204",  # Allow magic methods with no docstring
    "D203",    # Allow blank line before class definition - (we use D203, these conflict)
    "D213",    # Allow docstring summary to start on first line (we use D212, these conflict)
    "S101",    # Allow use of assert statement
    "INP001",  # Allow missing __init__.py file
    "FBT001",  # Allow Boolean-typed positional argument in function definition
    "G004",    # Allow f-strings in logging statements
    "COM812",  # Allow missing trailing commas
    "ERA001",  # Allow commented-out code
    "ANN401",  # Allow Any for kwargs type
    "FIX002",  # Allow TODO comments
    "TD003",   # Allow missing issue links
    "RET504",  # Allow unnecessary assignment before return
    "N812",    # Allow lowercase being imported as uppercase (e.g. torch.nn.functional as F)
    "T201",    # Allow print statements
    "T203",    # Allow pprint statements
    "FBT002",  # Allow boolean-typed positional argument in function definition
    "PD901",   # Allow generic variable names
    "PLR2004", # Allow magic value comparisons
    "C901",    # Allow complex functions (i.e. with high cyclomatic complexity)
    "S602",    # Allow shell=True in subprocess.run
    "SIM108",  # Allow regular if-else statements, don't force ternary operators
    "EXE002",  # Allow missing shebang for executable files
    "SIM102",  # Allow nested 'if' statements
    "NPY002",  # Allow legacy numpy random seed - TODO(maxoll): definitely remove this and fix
    "S603",    # Allow untrusted input to subprocesses - a lot of FPs here
    "S301",    # Allow pickle to deserialize untrusted data (possible security issue)
    "S607",    # Allow process with a partial executable path
    "D413",    # Allow no blank line after return docstring
    "PERF203", # Allow try-except inside loops
    "TRY301",  # Allow abstract raise statements
    ]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["impl"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"


[tool.ruff.lint.per-file-ignores]
 "test_*" = [
    "ANN",     # Ignore all annotation-related rules for test files
    "SLF001",  # Ignore private member access in test files
    "RUF012",  # Ignore mutable class arguments typing.ClassVar annotation
    "S101",    # Allow assert in tests
    "PLR2004", # Allow magic numbers in tests
    "ARG002",  # Ignore unused arguments in tests
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "PT011",   # Ignore pytest warnings
    "S106",    # Ignore password in tests
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.ruff.lint.flake8-annotations]
# Allow omitting return type for __init__ methods
mypy-init-return = true


########################################
################ MYPY ##################
########################################

[tool.mypy]
# Strict mode - this enables a lot of strict checks at once
strict = false
# Strict optional types
strict_optional = true

# None and Optional handling
no_implicit_optional = true  # Makes Optional types more explicit

# Untyped definitions and calls
check_untyped_defs = true   # Type check the interior of functions without type annotations
disallow_incomplete_defs = true
disallow_untyped_defs = true

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true

# Misc strictness flags
allow_redefinition = false   # Prevent variable redefinition with different types
strict_equality = true      # More thorough checks for equality comparisons

# Error messages configuration
pretty = true              # Use visually nicer output
show_error_context = true  # Show context for errors
show_column_numbers = true # Show column numbers in errors
show_error_codes = true    # Show error codes in messages

# Check this file (pyproject.toml) for unused configuration options.
warn_unused_configs = true

# Add extra checks
extra_checks = true

# By default, imported values to a module are treated as exported and mypy allows other modules to
# import them. When false, mypy will not re-export unless the item is imported using from-as or is
# included in __all__.
no_implicit_reexport = true

# These checks can only be enabeled if all dependencies are fully typed. That will never happen...
ignore_missing_imports = true
follow_imports = "skip"

# Exclude code
exclude = [
    'doc',
    'output',
    'dist',
    'build',
    'venv',
    '.venv',
    '__pycache__',
    '.git',
    '.pytest_cache',
    '.mypy_cache',
    '.ruff_cache',
    'test_*.py',        # Exclude all test files
    'tests',            # Exclude tests directory
    'notebooks',
    'examples',
    'migrations',
    '.eggs',
    '.tox',
    'site-packages', 
]

[[tool.mypy.overrides]]
# This will match any file starting with test_
module = "test_*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
strict_optional = false
warn_return_any = false
warn_unused_ignores = false

[tool.pytest.ini_options]
python_files = "test_*.py"
markers = [
    "online_inference: Online inference tests.",
    "premerge: Premerge tests.",
]
